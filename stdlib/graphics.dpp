#define GLAD_GL_IMPLEMENTATION
#cpp-include <glad/gl.h>
#define GLFW_INCLUDE_NONE
#cpp-include <GLFW/glfw3.h>

struct Point {
	f32 x, y;
};

struct Color {
	f32 r, g, b;
};

class Window {

	GLFWwindow* data;
	i32 width;
	i32 height;

	Point to_gl(Point p) {
		f32 x = (p.x / f32(this->width) - 0.5f) * 2.0f;
		f32 y = (p.y / f32(this->height) - 0.5f) * -2.0f;
		return { x, y };
	}

	Point to_gl_dimensions(Point p) {
		f32 w = (p.x / (f32(this->width) / 2.0f));
		f32 h = (p.y / (f32(this->height) / 2.0f));
		return { w, h };
	}

public:

	void draw_rectangle(f32 x, f32 y, f32 w, f32 h, Color color) {

		Point new_point = this->to_gl({ x, y });
		Point new_dim = this->to_gl_dimensions({ w, h });

		glBegin(GL_POLYGON);

		glColor3f(color.r / 255.0f, color.g / 255.0f, color.b / 255.0f);
		glVertex2f((new_point.x + new_dim.x).data(), (new_point.y - new_dim.y).data());
		glVertex2f(new_point.x.data(), (new_point.y - new_dim.y).data());
		glVertex2f(new_point.x.data(), new_point.y.data());
		glVertex2f((new_point.x + new_dim.x).data(), new_point.y.data());

		glEnd();
	}

	void draw_pixel(f32 x, f32 y, Color color) {

		Point new_point = this->to_gl({ x, y });

		glBegin(GL_POINTS);
		glColor3f(color.r / 255.0f, color.g / 255.0f, color.b / 255.0f);
		glVertex2f(new_point.x.data(), new_point.y.data());
		glEnd();
	}

	bool should_close() {
		return glfwWindowShouldClose(this->data);
	}

	Point mouse_position() {
		double x, y;
		glfwGetCursorPos(this->data, &x, &y);
		return { f32(x), f32(y) };
	}

	void update() {
		glFlush();

		glfwSwapBuffers(this->data);
		glfwPollEvents();

		glfwWaitEvents();
	}

	void clear() {
		glClear(GL_COLOR_BUFFER_BIT);
	}

	void clear(Color color) {
		glClearColor(color.r / 255.0f, color.g / 255.0f, color.b / 255.0f, 1.0f);
		glClear(GL_COLOR_BUFFER_BIT);
	}

	Window(str title, i32 width, i32 height) {
		if (!glfwInit()) {
			panic("Could not initialize GLFW");
		}
		this->width = width;
		this->height = height;

		this->data = glfwCreateWindow(width.data(), height.data(), title.c_str(), NULL, NULL);
		if (!this->data) {
			panic("Could not create window");
		}

		glfwMakeContextCurrent(this->data);
		gladLoadGL(glfwGetProcAddress);

		glClearColor(0.0, 0.0, 0.0, 1.0);
		glShadeModel(GL_FLAT);
	}

	~Window() {
		glfwTerminate();
	}

};
